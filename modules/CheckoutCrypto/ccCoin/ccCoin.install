<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function ccCoin_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_coin'] = array(
    'description' => 'The base table for our coin entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the coin entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
	  'coin_name' => array(
        'description' => 'A single coin acronym',
        'type' => 'varchar',
		'length' => 30,
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_code' => array(
        'description' => 'A single wallets coin code',
        'type' => 'varchar',
		'length' => 10,
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_rate' => array(
        'description' => 'The average coin rate in dollars',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_rate_btc' => array(
        'description' => 'The average BTC rate',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_rate_sell' => array(
        'description' => 'The rate at which Coingateway sells',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_rate_buy' => array(
        'description' => 'The rate at which Coingateway buys',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'market_sell_depth' => array(
        'description' => 'The depth of the market at which Coingateway sells',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'market_buy_depth' => array(
        'description' => 'The depth of the market at which Coingateway buys',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'exchange_id' => array(
        'description' => 'Id of coins exchange from exchange table',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'exchange_spec' => array(
        'description' => 'Specifier for coin on exchange',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_fee' => array(
        'description' => 'The default coin fee',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_txfee' => array(
        'description' => 'The coins txfee(miners fee)',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_MxConf' => array(
        'description' => 'A coins Max Confirm amount(confirm amount used to generate actual balance)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_enabled' => array(
        'description' => 'Enable a coin : true/false',
        'type' => 'varchar',
		'length' => 10,
        'not null' => TRUE,
        'default' => 'true',
      ),
	'min_amount' => array(
        'description' => 'A coins min withdraw amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'max_amount' => array(
        'description' => 'A coins max withdraw amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_community' => array(
        'description' => 'The coins community',
        'type' => 'varchar',
		'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
	'coin_validate' => array(
        'description' => 'A coin validation code (for addresses)',
        'type' => 'varchar',
		'length' => 3,
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_image' => array(
        'description' => 'A coin image',
        'type' => 'varchar',
		'length' => 200,
 		'not null' => TRUE,
    	'default' => '',
      ),
	'coin_description' => array(
		'description' => 'A coin description',
        'type' => 'varchar',
		'length' => 200,
        'not null' => TRUE,
        'default' => '0',
      ),
      'added' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('basic_id'),
  );

////  FIAT TABLE
	$schema['ccdev_fiat'] = array(
    'description' => 'The base table for our wallet entity.',
    'fields' => array(
      'fid' => array(
        'description' => 'Primary key of the wallet entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
	'coin_name' => array(
        'description' => 'A single wallets coin name',
        'type' => 'varchar',
		'length' => 30,
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_code' => array(
        'description' => 'A single wallets coin code',
        'type' => 'varchar',
		'length' => 10,
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_rate_usd' => array(
        'description' => 'A single wallets coin rate',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'exchange_id' => array(
        'description' => 'Id of coins exchange from exchange table',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_enabled' => array(
        'description' => 'Enable a coin : true/false',
        'type' => 'varchar',
		'length' => 10,
        'not null' => TRUE,
        'default' => 'true',
      ),
	'min_amount' => array(
        'description' => 'A coins min withdraw amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'max_amount' => array(
        'description' => 'A coins max withdraw amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_image' => array(
        'description' => 'A coin image',
        'type' => 'varchar',
		'length' => 200,
 		'not null' => TRUE,
    	'default' => '',
      ),
	'coin_description' => array(
		'description' => 'A single wallets coin validation code (for addresses)',
        'type' => 'varchar',
		'length' => 200,
        'not null' => TRUE,
        'default' => '0',
      ),
      'added' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('fid'),
	);
  return $schema;
}

/**
 * Implements hook_install().
 *
 * Adds api keys used for site maintenance
 * and user assistance
 */
function ccCoin_install() {
   if(!(drupal_get_schema('ccdev_fiat'))) {
      drupal_install_schema('ccdev_fiat');
   }
   if(!(drupal_get_schema('ccdev_coin'))) {
      drupal_install_schema('ccdev_coin');
   }

	/// populate coin data
	populateCoins();
	populateFiats();
}

function populateFiats(){
			$Fiats = array(
				$fiat = array(
				'name' => 'Canadian',
				'code' => 'CAD',
				'coin_image' => 'https://downloads.checkoutcrypto.com/img/dogecoin.png',
				'min_amt' => '1',
				'max_amt' => '1000000',
				),
				$fiat = array(
				'name' => 'Pound',
				'code' => 'GBP',
				'coin_image' => 'https://downloads.checkoutcrypto.com/img/dogecoin.png',
				'min_amt' => '1',
				'max_amt' => '1000000',
				),

			);
	$count = 1;
	foreach($Fiats as $ft){
		db_insert('ccdev_fiat')->fields(array(
		'fid' => $count,
		'bundle_type' => 'coin_bundle',
		'coin_name' => $ft['name'],
		'coin_code' => $ft['code'],
		'coin_rate_usd' => '0.0',
		'coin_enabled' => 'true',
		'min_amount' => $ft['min_amt'],
		'max_amount' => $ft['max_amt'],
		'coin_image' => $ft['coin_image'],
		'coin_description' => 'a default fiat coin',
		))->execute();
		$count++;
	}
}

function populateCoins(){

			$Coins = array(
				$coin = array( 
				'name' => 'Potcoin',
				'code' => 'POT',
				'community' => 'http://www.reddit.com/r/potcoin',
				'coin_image' => 'sites/all/modules/CheckoutCrypto/ccCoin/images/potcoin.png',
				'validate' => '37',
				'txfee' => '0.1',
				'ourfee' => '1',
				'maxconfirm' => '20',
				'min_amt' => '25',
				'max_amt' => '100000',
				),

				$coin = array(
				'name' => 'Dogecoin',
				'code' => 'DOGE',
				'community' => 'http://www.reddit.com/r/dogecoin',
				'coin_image' => 'sites/all/modules/CheckoutCrypto/ccCoin/images/dogecoin.png',
				'validate' => '1E',
				'txfee' => '1',
				'ourfee' => '1',
				'maxconfirm' => '20',
				'min_amt' => '100',
				'max_amt' => '100000000000',
				),
				$coin = array(
				'code' => 'LTC',
				'name' => 'Litecoin',
				'community' => 'http://www.reddit.com/r/litecoin',
				'coin_image' => 'sites/all/modules/CheckoutCrypto/ccCoin/images/litecoin.png',
				'validate' => '30',
				'txfee' => '0.00001',
				'ourfee' => '1',
				'maxconfirm' => '20',
				'min_amt' => '0.01',
				'max_amt' => '10000000',
				),
				$coin = array(
				'code' => 'BTC',
				'name' => 'Bitcoin',
				'community' => 'http://www.reddit.com/r/bitcoin',
				'coin_image' => 'sites/all/modules/CheckoutCrypto/ccCoin/images/bitcoin.png',
				'validate' => '00',
				'txfee' => '0.001',
				'ourfee' => '1',
				'maxconfirm' => '2',
				'min_amt' => '0.01',
				'max_amt' => '100000',
				),
			);
	$count = 1;
	foreach($Coins as $cn){
		db_insert('ccdev_coin')->fields(array(
		'basic_id' => $count,
		'bundle_type' => 'coin_bundle',
		'coin_name' => $cn['name'],
		'coin_code' => $cn['code'],
		'coin_rate' => '0.0',
		'coin_rate_btc' => '0.0',
		'coin_community' => $cn['community'],
		'coin_fee' => $cn['ourfee'],
		'coin_txfee' => $cn['txfee'],
		'coin_MxConf' => $cn['maxconfirm'],
		'coin_enabled' => 'true',
		'min_amount' => $cn['min_amt'],
		'max_amount' => $cn['max_amt'],
		'coin_validate' => $cn['validate'],
		'coin_image' => $cn['coin_image'],
		))->execute();
		$count++;
	}


}

/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function ccCoin_uninstall() {
  field_attach_delete_bundle('ccdev_fiat', 'fiat_bundle');
}
