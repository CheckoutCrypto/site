<?php
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);
/**
 * CHECKOUTCRYPTO Coin Module - Add/remove/enable/disable/display coins
 * Copyright 2014 CheckoutCrypto
 */

/**
 * Implements hook_entity_info().
 */
function ccCoin_entity_info() {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/settings');
	return coin_info();
}

/**
 * Implements the uri callback.
 */
function ccdev_coin_uri($basic) {
  return array(
    'path' => 'ccCoin/basic/' . $basic->basic_id,
  );
}

/**
 * Implements the uri callback.
 */
function ccdev_fiat_uri($basic) {
  return array(
    'path' => 'ccFiat/basic/' . $basic->basic_id,
  );
}

/**
 * Implements hook_menu().
 */
function ccCoin_menu() {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/settings');
	return coin_menu();
}

/**
 * Declare what blocks are provided by this module.
 * Implements hook_block_info().
 */
function ccCoin_block_info(){
  module_load_include('inc','ccCoin','includes/cc-php/block');
	return coin_block_info();
}

/**
 * Define what our block is going to look like.
 * Implements hook_block_view().
 */
function ccCoin_block_view($block_key){
  module_load_include('inc','ccCoin','includes/cc-php/block');
	return coin_block_view($block_key);
}

/**
 * Implementation of hook_preprocess().
 */
function ccCoin_preprocess(&$variables, $hook) {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/settings');
	$settings = coin_theme();
	drupal_add_js($settings, 'setting');
}

/**
 * Basic information for the page.
 */
function ccCoin_info_page() {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/page');
	return coin_info_page();
}

/**
 * Implements hook_permission().
 */
function ccCoin_permission() {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/settings');
	return coin_permissions();
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_coin_title($entity) {
  return t('Coins');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_coin_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_coin';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
   $entity->content['coin_name'] = array(
    '#type' => 'item',
    '#title' => t('Coin Name'),
    '#markup' => $entity->coin_name,
  );
  $entity->content['coin_code'] = array(
    '#type' => 'item',
    '#title' => t('coin code e.g. BTC'),
    '#markup' => $entity->coin_code,
  ); 
  $entity->content['coin_rate'] = array(
    '#type' => 'item',
    '#title' => t('coin rate'),
    '#markup' => $entity->coin_rate,
  ); 
  $entity->content['coin_rate_btc'] = array(
    '#type' => 'item',
    '#title' => t('coin rate(btc)'),
    '#markup' => $entity->coin_rate_btc,
  ); 
  $entity->content['coin_community'] = array(
    '#type' => 'item',
    '#title' => t('coin community e.g. reddit.com/r/potcoin'),
    '#markup' => $entity->coin_community,
  ); 
  $entity->content['coin_fee'] = array(
    '#type' => 'item',
    '#title' => t('coin fee'),
    '#markup' => $entity->coin_fee,
  ); 
  $entity->content['coin_txfee'] = array(
    '#type' => 'item',
    '#title' => t('coin tx fee '),
    '#markup' => $entity->coin_txfee,
  ); 
  $entity->content['coin_MxConf'] = array(
    '#type' => 'item',
    '#title' => t('coin Max Confirm '),
    '#markup' => $entity->coin_MxConf,
  ); 
  $entity->content['coin_enabled'] = array(
    '#type' => 'item',
    '#title' => t('Coin Enabled '),
    '#markup' => $entity->coin_enabled,
  ); 
  $entity->content['min_amount'] = array(
    '#type' => 'item',
    '#title' => t('coin Min Amount '),
    '#markup' => $entity->min_amount,
  ); 
  $entity->content['max_amount'] = array(
    '#type' => 'item',
    '#title' => t('coin Max Amount '),
    '#markup' => $entity->max_amount,
  ); 
  $entity->content['coin_validate'] = array(
    '#type' => 'item',
    '#title' => t('coin validate address '),
    '#markup' => $entity->coin_validate,
  ); 
  $entity->content['coin_image'] = array(
    '#type' => 'item',
    '#title' => t('coin image '),
    '#markup' => $entity->coin_image,
  ); 
  $entity->content['coin_description'] = array(
    '#type' => 'item',
    '#title' => t('coin description '),
    '#markup' => $entity->coin_description,
  ); 
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ccdev_coin_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

function ccdev_manage_coin(){
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/ccdev_coin/manage'))
    );
 /// $content['table'] = ccdev_coin_list_entities();
	return $content;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_coin_add() {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/forms');
  $entity = entity_get_controller('ccdev_coin')->create();
  return drupal_get_form('ccdev_coin_form', $entity);
}
/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_coin_edit($coincode) {
  $entity = entity_get_controller('ccdev_coin')->edit($coincode);
  return drupal_get_form('ccCoin_editcoin_form', $entity);
}


/**
 * Form deletion handler.
 */
function ccdev_coin_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  ccdev_coin_delete($entity);
  drupal_set_message(t('The entity %coin_name (ID %id) has been deleted',
    array('%coin_name' => $entity->coin_name, '%id' => $entity->basic_id))
  );
  $form_state['redirect'] = 'ccMod/ccCoin';
}

/**
 * We save the entity by calling the controller.
 */
function ccdev_coin_save(&$entity) {
  return entity_get_controller('ccdev_coin')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_coin_delete($entity) {
  entity_get_controller('ccdev_coin')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccCoinBasicControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create/Save/Edit/Delete an entity.
   */
  public function create();
  public function save($entity);
  public function edit($coincode);
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccCoinBasicController
  extends DrupalDefaultEntityController
  implements ccCoinBasicControllerInterface {

  /**
   * Create and return a new ccdev_coin entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ccdev_coin';
    $entity->basic_id = 0;
    $entity->bundle_type = 'coin_bundle';
    $entity->coin_name = 'coin';
    $entity->coin_rate = '0.0';
    $entity->coin_rate_btc = '0.0';
    $entity->coin_code = 'eg btc';
    $entity->coin_community = 'http://www.reddit.com/r/';
    $entity->coin_fee = '0.0';
    $entity->coin_txfee = '0.0';
    $entity->coin_MxConf = '0';
    $entity->coin_enabled = 'true';
    $entity->min_amount = '0.0';
    $entity->max_amount = '0.0';
    $entity->coin_validate = '37';
    $entity->coin_image = 'https://downloads.checkoutcrypto.com/img/coin.png';
    $entity->coin_description = 'a brief description of the currency';
    return $entity;
  }

  /**
   * Create and return a new ccdev_coin entity.
   */
  public function edit($coincode) {

	$coindata = getCoinData($coincode);
    $entity = new stdClass();
    $entity->type = 'ccdev_coin';
    $entity->basic_id = 0;
    $entity->bundle_type = 'coin_bundle';
    $entity->coin_name = 'coin';
    $entity->coin_rate = '0.0';
    $entity->coin_rate_btc = '0.0';
    $entity->coin_rate_sell = '0.0';
    $entity->coin_rate_buy = '0.0';
    $entity->market_sell_depth = '0.0';
    $entity->market_buy_depth = '0.0';
    $entity->exchange_id = '0';
    $entity->exchange_spec = '0';
    $entity->coin_code = 'eg. btc';
    $entity->coin_community = 'http://www.reddit.com/r/';
    $entity->coin_fee = '0.0';
    $entity->coin_txfee = '0.0';
    $entity->coin_MxConf = '0';
    $entity->coin_enabled = 'true';
    $entity->min_amount = '0.0';
    $entity->max_amount = '0.0';
    $entity->coin_validate = '37';
    $entity->coin_image = '';
    $entity->coin_description = 'a brief description of the currency';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    if (empty($entity->basic_id)) {
      $entity->created = date("Y-m-d H:i:s");
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ccdev_coin');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    drupal_write_record('ccdev_coin', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_coin', $entity);
    }
    else {
      field_attach_update('ccdev_coin', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'ccdev_coin');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more ccdev_coin entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_coin');
          field_attach_delete('ccdev_coin', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_coin')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccCoin', $e);
        throw $e;
      }
    }
  }
}


/**
 * Form submit handler: Submits basic_add_form information.
 */
function ccCoin_addcoin_form_submit($ajax, $data) {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/forms_sub');
	manage_coin_submit($data);
	$commands[] = ctools_modal_command_dismiss();
	print ajax_render($commands);
	drupal_exit();
}



/**
 * Ajax menu callback.
 */
function ccCoin_addcoin_callback($ajax, $coincode = NULL) {
  if ($ajax) {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/forms');
    ctools_add_js('ajax-responder');
    ctools_include('ajax');
    ctools_include('modal');
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Enable Currency'),
      'coincode' => $coincode,
    );

    $output = ctools_modal_form_wrapper('addcoin_form', $form_state);
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('addcoin_form');
  }
}

/**
 * Ajax menu callback.
 */
function ccCoin_editcoin_callback($ajax, $coincode = NULL) {
  if ($ajax) {
	module_load_include('inc', 'ccCoin', 'includes/cc-php/forms');
    ctools_add_js('ajax-responder');
    ctools_include('ajax');
    ctools_include('modal');
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Enable Currency'),
      'coincode' => $coincode,
    );

    $output = ctools_modal_form_wrapper('editcoin_form', $form_state);
 
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('editcoin_form');
  }
}

/**
 * @} End of "defgroup ccCoin".
 */
