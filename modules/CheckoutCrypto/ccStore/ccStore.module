<?php

//error_reporting(~0); ini_set('display_errors', 1);

/**
 * Author: Grant Hutchinson - CheckoutCrypto - dreamcode@checkoutcrypto.com
 * Copyright 2014 Apache 2.0 Licensed
 **/

/**
 * Checkout crypto settings form.
 */
 function ccStore_settings_form() {
  $form = array();

  $form['server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['server']['uc_cc_server'] = array(
    '#type' => 'radios',
    '#title' => t('Remote server'),
    '#default_value' => variable_get('uc_cc_server', "api.checkoutcrypto.com"),
    '#options' => array('api.checkoutcrypto.com' => 'api.checkoutcrypto.com'),
  );
  $form['server']['uc_cc_server_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => variable_get('uc_cc_server_apikey', ''),
    '#description' => t('Your !link1 API key. !link2',
      array('!link1'=> '<a href="https://checkoutcrypto.com">'.t('CheckoutCrypto').'</a>','!link2'=> '<a href="https://checkoutcrypto.com/help/faq">'.t('What\'s this?').'</a>')),
    '#required' => TRUE,
  );

    $form['server']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Coins'),
	'#ajax' => array(
            'callback' => 'cc_refresh_callback',),
);

  $form['#validate'][] = 'ccStore_settings_form_validate';

  return system_settings_form($form);
} 

function cc_refresh_callback(){
    module_load_include('inc', 'ccStore', 'includes/cc-php/api');
    $return = ccApiRefreshCoins();
    return $return;

}

/**
 * Validate cc payment method settings.
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
 function ccStore_settings_form_validate($form, &$form_state) {
/*  $c = $form_state['values']['uc_cc_server'];
  if ($c != 'api.checkoutcrypto.com') {
    form_set_error('uc_cc_server', t('Invalid remote server specified'));
  }

  $c = $form_state['values']['uc_cc_server_apikey'];
  if ($c == NULL) {
      form_set_error('uc_cc_server', t('API key is a required field!'));
  }

  if (!count(form_get_errors())) {
      $success = ccApiRefreshCoins();
      if($success !== TRUE) {
          form_set_error('', t("Unable to communicate with the selected checkoutcrypto.com server."));
      }
  }   */
} 

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_mail_alter().
 * @param array $&message
 *
 * Produces an altered email for 'uc_order_action-mail'
 * which includes the cc address to send payments to
 * for the order.
 */
function ccStore_mail_alter(&$message) {
  // Set this to debug mails on local disk.
  if ($message['id'] == 'uc_order_action-mail') {
    $order = $message['params']['replacements']['uc_order'];

    $result = db_select('uc_payment_cc')
      ->fields('uc_payment_cc', array(
        'order_id',
        'cc_coinname_short',
        'cc_coinname_full',
        'cc_coin_amount',
        'cc_address',
        'cc_pay_status',
        'cc_queue_id',
        'cc_pay_amount',
        'timestamp'))
      ->condition('order_id', $order->order_id, '=')
      ->execute()
      ->fetchAssoc();

    $message['body'][] = t("\n--\nPayment is sent to address: ") . t($result['cc_address']);
  }
}

function ccStore_perm () {
  return array(
    'access ccStore via ajax',
  );
}

/**
 * Implementation of hook_menu().
 */
function ccStore_menu() {
  $items['uc_cc/%ctools_js'] = array(
    'page callback' => 'ccStore_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['service/charge'] = array(
    'access callback' => TRUE,
    'page callback' => 'ccStore_service_callback',
    'type' => MENU_CALLBACK,
  );

$items['cart/checkout/complete'] = array(
    'title' => 'Order complete',
    'description' => 'Display information upon completion of an order.',
    'page callback' => 'ccStore_checkout_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_preprocess().
 */
function ccStore_preprocess(&$variables, $hook) {
  $settings = array(
    'CToolsModal' => array(
      'loadingText' => t('Loading...'),
      'closeText' => t('Close'),
      'modalSize' => array(
        'type' => 'fixed',
        'height' => 600,
        'width' => 600,
      ),
      'modalOptions' => array(
        'opacity' => .6,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'animationSpeed' => 'slow',
      'closeImage' => theme('image', array(
        'path' => ctools_image_path('icon-close-window.png'),
        'title' => t('Close window'),
        'alt' => t('Close window'),
      )),
      'throbber' => theme('image', array(
          'path' => ctools_image_path('throbber.gif'),
          'title' => t('Loading...'),
          'alt' => t('Loading'),
      )),
    ),
  );
  drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_theme().
 */
function uc_cc_theme($existing, $type, $theme, $path) {
  return array(
    'uc_payment_method_' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function ccStore_entity_load($entities, $type) {
  if ($type == 'uc_order') {
    foreach ($entities as $entity) {
      $entity->cc_payment = db_select('uc_payment_cc', 'u')
        ->fields('u', array('cc_address', 'exchange_rate','cc_coinname_short','cc_coinname_full'))
        ->condition('order_id', $entity->order_id)
        ->execute()
        ->fetchAssoc();
    }
  }
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function ccStore_theme_registry_alter(&$registry) {
  $registry['uc_order']['process functions'][]='uc_cc_postprocess_invoice_themer';
}

/**
 * Modify Payment method and insert the order payment information
 * @param $variables
 * @param $hook
 */
function ccStore_postprocess_invoice_themer(&$variables, $hook) {
    if ($variables['order']->payment_method == 'checkoutcrypto' && !empty($variables['order']->cc_payment)) {

    $result = db_select('uc_payment_cc')
      ->fields('uc_payment_cc', array(
        'order_id',
        'cc_coinname_short',
        'cc_coinname_full',
        'cc_address',
        'cc_pay_amount',
        'timestamp'))
      ->condition('order_id', $order->order_id, '=')
      ->execute()
      ->fetchAssoc();

    $coin_name = $result['cc_coinname_short'];
    $coin_address = $result['cc_address'];
    $coin_amount = $result['cc_pay_amount'];
    $variables['order_payment_method'] = t("CheckoutCrypto: !coin !amount paid to !address", array(
      '!coin' => $coin_name,
      '!amount' => $coin_amount,
      '!address' => $coin_address
    ));
  }
}

/*******************************************************************************
 * cc functions and utility functions
 ******************************************************************************/


/************************************************************************
*Implementation of hook_submit().
*/
function ccStore_form_submit(&$form, &$form_state) {
 if(isset($_SESSION['cart_order'])) { //locate the current order from the session
        $order = uc_order_load(intval($_SESSION['cart_order']));
     } else {
       // watchdog('ccStore_form_submit', 'Could not load current order');
     }
    global $user;
    module_load_include('inc', 'ccStore', 'includes/cc-php/lib');
    module_load_include('inc', 'ccStore', 'includes/cc-php/service');
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('ajax-responder');
	

   if(isset($form_state['input']['ccStore_selected_coin'])) {
        $coin_selected = $form_state['input']['ccStore_selected_coin'];
          if($coin_selected != NULL) {
              $coin_name_input_short = strtoupper(substr($coin_selected, 8, strlen($coin_selected)));
              if(!isset($order->cc_coinname_short) OR $order->cc_coinname_short != $coin_name_input_short) {
                  $coins = getAvailableCoins();
                  foreach($coins as $coin){
                      $coin_code = strtoupper($coin['coin_code']);
                      $coin_name = $coin['coin_name'];
                      if($coin_name_input_short == $coin_code) {
                          $order->cc_coinname_full = $coin_name;
                          $order->cc_coinname_short = $coin_code;
                      }
                  }
              }
          }
    } 
     $result = cc_order_status($order);
    //If order not found, create a new one
    if ($result === FALSE) {
      $order_info = uc_payment_method_cc('order-submit', $order);
      $coin_amount = $order_info['coin_amount'];
      $coin_name = $order_info['coin_name'];
      $coin_name_full = $order_info['coin_name_full'];
      $queue_id = $order_info['queue_id'];
      $pay_status = $order_info['pay_status'];
      $time_left = TRUE;
    } else {
        $time_limit = variable_get('uc_cc_timeout', '900');
        $time = (int)time();
        $db_time = (int)strtotime($result['timestamp']);
        $time_left = TRUE;
        $time_diff = ($time - $db_time);

        if($time_limit <= $time_diff) {
            //order time limit reached
            $time_limit_message = 'Time limit reached';
            $time_left = FALSE;

            //cancel order TODO
        }

        //Check if customer has switched coin
        if((isset($order->cc_coinname_short)) AND ($order->cc_coinname_short != NULL) AND ($result['cc_coinname_short'] != $order->cc_coinname_short)) {
          $order_info = uc_payment_method_cc('order-submit', $order);
          $coin_amount = $order_info['coin_amount'];
          $coin_name = $order_info['coin_name'];
          $coin_name_full = $order_info['coin_name_full'];
          $queue_id = $order_info['queue_id'];
          $pay_status = $order_info['pay_status'];
          $change_coin = TRUE;
        } else { //same
          $coin_amount = $result['cc_coin_amount'];
          $coin_name = $result['cc_coinname_short'];
          $coin_name_full = $result['cc_coinname_full'];
          $queue_id = $result['cc_queue_id'];
          $pay_status = $result['cc_pay_status'];
          $change_coin = FALSE;
          $order->cc_coinname_full = $coin_name_full;
          $order->cc_coinname_short = $coin_name;
        }
   }
   //Check if payment has been received
   if(strtolower($pay_status) == 'payment_entered') {
        $form_state['values']['op'] = t('complete');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;      

        //close modal and redirect to checkout page
        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_ajax_command_redirect('cart/checkout/complete');
        drupal_set_message('Your purchase is now complete. A receipt will be emailed to you');

   } else if(strtolower($pay_status) == 'service_charged'){
		$form_state['values']['op'] = t('complete');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;      
	
        //close modal and redirect to checkout page
        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_ajax_command_redirect('cart/checkout/complete');
        drupal_set_message('Your purchase is now complete. A receipt will be emailed to you');

	}else {
       //Add basic info and wrappers
        if($time_left) {
			 module_load_include('inc', 'ccStore', 'includes/cc-php/lib');
			// fillPaymentWrapper($coin_name_full, $coin_name, $coin_amount);

			$form['ccStore_payment_information'] = array('#markup' => '<div id="cc_payment_information"><p>Selected currency: <strong>'
				.$coin_name_full.'</strong><br>Please send <strong>'.$coin_name.' '.$coin_amount.'</strong> to the following address</p></div>');
				   
			$commands[] = ajax_command_replace('#cc_payment_information', drupal_render($form['ccStore_payment_information']));

           if(isset($result['cc_address']) AND !($change_coin)) {
			$genQR = generateQR($result['cc_address'], 200);

			$form['ccStore_payment_address'] = array(
					  '#type' => 'textfield',
					  '#value' => t($result['cc_address']),
					  '#attributes' => array('readonly' => 'readonly','size' => 50),
					  '#prefix' => '<div id="uc_cc_payment_address_container">',
					  '#suffix' => '</div>',
			);
			$form['ccStore_payment_qr_address'] = array(
				  '#markup' => '<div id="uc_cc_payment_qr_address_container">'.$genQR.'<br></div>'
			 );

			$commands[] = ajax_command_replace('#uc_cc_payment_address_container', drupal_render($form['ccStore_payment_address']));
			$commands[] = ajax_command_replace('#uc_cc_payment_qr_address_container', drupal_render($form['ccStore_payment_qr_address']));     
           } else {

			$genQR = generateQR($result['cc_address'], 150);

			$form['ccStore_payment_address'] = array(
					  '#type' => 'textfield',
					  '#value' => t('generating'),
					  '#attributes' => array('readonly' => 'readonly','size' => 50),
					  '#prefix' => '<div id="uc_cc_payment_address_container">',
					  '#suffix' => '</div>',
			);
			$form['ccStore_payment_qr_address'] = array(
				  '#markup' => '<div id="uc_cc_payment_qr_address_container">'.$genQR.'</div>'
			 );

			$commands[] = ajax_command_replace('#uc_cc_payment_address_container', drupal_render($form['ccStore_payment_address']));
			$commands[] = ajax_command_replace('#uc_cc_payment_qr_address_container', drupal_render($form['ccStore_payment_qr_address']));     
           }   
       } else {
			$form['ccStore_payment_information'] = array('#markup' => '<div id="cc_payment_information">'.$time_limit_message.'</div>');
			$commands[] = ajax_command_replace('#cc_payment_information', drupal_render($form['ccStore_payment_address']));
       } 
   }  
    print ajax_render($commands);
    drupal_exit(); 
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Ajax menu callback.
 */
function ccStore_callback($ajax, $data) {
    module_load_include('inc', 'ccStore', 'includes/cc-php/form');
	if(isset($_SESSION['cart_order'])) {
		$order = uc_order_load(intval($_SESSION['cart_order']));
	} else {
		// watchdog('ccStore_callback', 'Could not load current order: !fault');
	}
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('ajax-responder');
    drupal_add_js('sites/all/modules/checkoutcrypto/CheckoutCrypto/ccStore/ccStore.js', 'file');
    drupal_add_css('sites/all/modules/checkoutcrypto/CheckoutCrypto/ccStore/ccStore.css', 'file');
	global $base_url;

	$my_settings = array(
	  'baseUrl' => $base_url,
	 );
    $time_limit = variable_get('uc_cc_timeout', '900');
    $ccStore_settings = array(
        'time_limit' => $time_limit
    );
	drupal_add_js(array('ccStore' => $my_settings), 'setting');
    drupal_add_js(array('ccStore' => $ccStore_settings), 'setting');

    module_load_include('inc', 'ccStore', 'includes/cc-php/lib');

    $status = cc_order_status($order);
    if($status != FALSE || $status != NULL) {
        $cc_sel_coin = TRUE;
    } else {
        $cc_sel_coin = FALSE;
    }

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Checkout Crypto Payment Form'),
      'cc_sel_coin' => $cc_sel_coin,
    );
    $output = ctools_modal_form_wrapper('ccStore_form', $form_state);
	if (!empty($form_state['executed'])) {
      // Create ajax command array, dismiss the modal window.
      $output = array();
      $output[] = ctools_modal_command_dismiss();
    } 
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('ccStore_form');
  } 
}

function uc_payment_method_cc($op, &$order, $form = NULL, &$form_state = NULL) {

  switch ($op) {
    case 'cart-review':
        drupal_add_js('sites/all/modules/checkoutcrypto/CheckoutCrypto/ccStore/ccStore.js', 'file');
        drupal_add_css('sites/all/modules/checkoutcrypto/CheckoutCrypto/ccStore/ccStore.css', 'file');
        break;

    // Add cc settings to the payment methods settings form.
    case 'settings':
      return ccStore_settings_form();
    case 'cart-details':
		module_load_include('inc', 'ccStore', 'includes/cc-php/form');
		return ccStore_cart_form($order);
    case 'order-submit':
     	module_load_include('inc', 'ccStore', 'includes/cc-php/lib');
  	 	$coin_name = $order->cc_coinname_short;
		$coin_name_full = $order->cc_coinname_full;
		$coin_amount = ccStore_payment_amount_to_coin($order);
		$coin_rate = ccStore_exchange_rate($order);

      $request = array();
      $request['coin_name'] = $coin_name;
      $request['coin_amount'] = $coin_amount;
      $response = ccApiNewOrder($request);
      if(isset($response['queue_id'])) {
          $queue_id = $response['queue_id'];
      } else {
          return FALSE;
      }
	  $hasOrder = checkOrderExists($order->order_id);
      if($hasOrder) { //order exists but most likely order attributes needs to be updated
          try {
            db_update('uc_payment_cc')
             ->fields(array(
                'cc_pay_status' => 'registered',
                'cc_address' => NULL, //make sure we don't use an address for another coin
                'cc_coinname_short' => $coin_name,
                'cc_coinname_full' => $coin_name_full,
                'cc_coin_amount' => $coin_amount,
                'cc_queue_id_tmp' => $queue_id,
             ))
             ->condition('order_id', $order->order_id, '=')
             ->execute();
          } catch (exception $e) {
          //  watchdog('uc_payment_method_cc', 'Could not update order info in database: !fault', $e->getMessage());
          }
      } else { //new order
			$status = 'registered';
			createCachedOrder($order->order_id, $coin_rate, $coin_name, $coin_name_full, $coin_amount, $queue_id, $status);
      }

      $return = array('success' => TRUE, 'coin_amount' => $coin_amount, 'queue_id' => $queue_id, 'coin_name' => $coin_name, 'coin_name_full' => $coin_name_full, 'pay_status' => 'registered');
      return $return;  
    case 'order-cancel':
        try {
          db_update('uc_payment_cc')
             ->fields(array(
                'cc_pay_status' => 'cancelled',
             ))
             ->condition('order_id', $order->order_id, '=')
             ->execute();
        } catch (exception $e) {
         //   watchdog('uc_payment_method_cc', 'Could not update order info in database: !fault', $e->getMessage());
        }
        break;
  }
}

/**
 * Implementation of hook_payment_method().
 */
function ccStore_uc_payment_method() {
  $title = theme('image', array(
    'path' => drupal_get_path('module', 'uc_cc') . '/images/logo.jpg',
    'attributes' => array('class' => array('uc-cc')),
  )) . ' ' . t('Checkout Crypto');

  $methods['checkoutcrypto'] = array(
    'id' => 'checkoutcrypto',
    'name' => t('Checkout Crypto'),
    'title' => $title,
    'desc' => t('Pay with Checkout Crypto.'),
    'callback' => 'uc_payment_method_cc',
    'redirect' => 'cc_payment_form',
    'weight' => 1,
    'no_gateway' => TRUE,
    'checkout' => TRUE,
  );
  return $methods;
}

/**
 * Payment form to override 
 */
function cc_payment_form($form, &$form_state) {
  ctools_include('modal');
  ctools_modal_add_js();
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to payment'),
	'#ajax' => array(
            'callback' => 'ccStore_callback',),
  );
  return $form;
}

function ccStore_checkout_complete() {
  if (empty($_SESSION['cart_order']) || empty($_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'])) {
    drupal_goto('cart');
  }

  $order = uc_order_load(intval($_SESSION['cart_order']));

  if (empty($order)) {
    // Display messages to customers and the administrator if the order was lost.
    drupal_set_message(t("We're sorry.  An error occurred while processing your order that prevents us from completing it at this time. Please contact us and we will resolve the issue as soon as possible."), 'error');
    watchdog('uc_cart', 'An empty order made it to checkout! Cart order ID: @cart_order', array('@cart_order' => $_SESSION['cart_order']), WATCHDOG_ERROR);
    drupal_goto('cart');
  }

  $build = uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  unset($_SESSION['uc_checkout'][$order->order_id], $_SESSION['cart_order']);

  // Add a comment to let sales team know this came in through the site.
  uc_order_comment_save($order->order_id, 0, t('Order created through website.'), 'admin');

  $page = variable_get('uc_cart_checkout_complete_page', '');
  if (!empty($page)) {
    drupal_goto($page);
  }
  return $build;
}



