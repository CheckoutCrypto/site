<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function ccGroup_schema() {
  $schema = array();
  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_groups'] = array(
    'description' => 'The base table for our Group Pricing entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the Group Pricing entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'grp_name' => array(
        'description' => 'The group pricing name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'grp_description' => array(
        'description' => 'The group pricing description',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
     'grp_type' => array(
        'description' => 'The what kind of payment group this is hosting/api.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'grp_max_transactions' => array(
        'description' => 'The maximum transactions allowed in this package',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'grp_max_emails' => array(
        'description' => 'The maximum email transactions allowed in this package',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'grp_withdraw_fee' => array(
        'description' => 'The cost in percentile for each transaction',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'grp_trade_fee' => array(
        'description' => 'The billing cycle cost in dollars',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'grp_exchange_fee' => array(
        'description' => 'The billing cycle cost in dollars',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'grp_monthly_fee' => array(
        'description' => 'The billing cycle cost in dollars',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
     'grp_payment_length' => array(
        'description' => 'The Payment length(days).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
     'grp_size' => array(
        'description' => 'The number of users in group',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
     'grp_SKU' => array(
        'description' => 'Group Identifier, as it relates to a dynamic product.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'user_id' => array('grp_name'),
    ),
    'primary key' => array('basic_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 *
 * Adds api keys used for site maintenance
 * and user assistance
 */
function ccGroup_install() {
   if(!(drupal_get_schema('ccdev_groups'))) {
      drupal_install_schema('ccdev_groups');
		add_default_fee_group();
   }
}

function add_default_fee_group(){
	try {
              db_insert('ccdev_groups')->fields(array(
                'bundle_type' => 'ccdev_groups_bundle',
                'grp_name' => 'default',
				'grp_description' => 'default coingateway fee',
				'grp_type' => 'default',				
				'grp_max_transactions' => 1000,
				'grp_max_emails' => 2,
				'grp_withdraw_fee' => 1,
				'grp_trade_fee' => 1,
				'grp_exchange_fee' => 1,
				'grp_monthly_fee' => 1,
				'grp_payment_length' => 0,
				'grp_SKU' => '-',
				'grp_size' => 0,
				'created' => date("Y-m-d H:i:s");
              ))->execute();
          } catch (exception $e) {
			}
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function ccGroup_uninstall() {
  field_attach_delete_bundle('ccdev_groups', 'ccdev_groups_bundle');
}
