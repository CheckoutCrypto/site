<?php
/**
 * CheckoutCrypto Group Module  - Group pricing package setup/configure/modify
*  Copyright 2014 CheckoutCrypto
 */

error_reporting(~0); ini_set('display_errors', 1);


/**
 * Implements hook_entity_info().
 */
function ccGroup_entity_info() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/settings');
	return group_info();
}

/**
 * Implements the uri callback.
 */
function ccdev_groups_uri($basic) {
  return array(
    'path' => 'ccMods/ccGroup/basic/' . $basic->basic_id,
  );
}

/**
 * Implements hook_menu().
 */
function ccGroup_menu() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/settings');
	 return group_menu();
}

/**
 * Implements hook_permission().
 */
function ccGroup_permission() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/settings');
	return group_permissions();
}


/**
 * Basic information for the page.
 */
function ccGroup_info_page() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/page');
	return group_page();
}

/**
 * Basic information for the page.
 */
function ccGroup_admin_page() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/page');
	return group_page();
}

/**
 * Fetch a basic object.
 */
function ccdev_groups_load($basic_id = NULL, $reset = FALSE) {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/entity_load');
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = ccdev_groups_load_multiple($basic_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Ajax menu callback.
 */
function ccGroup_manage_callback($ajax, $group_id = NULL) {

  if ($ajax) {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/form');
    ctools_add_js('ajax-responder');
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Manage Group'),
      'group_id' => $group_id,
    );
    $output = ctools_modal_form_wrapper('ccGroup_manage_form', $form_state);
 
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('manage_form');
  }
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_groups_title($entity) {
  return t('Your Groups Information');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_groups_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_groups';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  $entity->content['grp_name'] = array(
    '#type' => 'item',
    '#title' => t('Name:'),
    '#markup' => '<div id="cc_api_key_wrapper">'.$entity->grp_name.'</div>',
  );
  $entity->content['grp_description'] = array(
    '#type' => 'item',
    '#title' => t('Description:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_description.'</div>',
  );
  $entity->content['grp_type'] = array(
    '#type' => 'item',
    '#title' => t('Type:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_type.'</div>',
  );
  $entity->content['grp_withdraw_fee'] = array(
    '#type' => 'item',
    '#title' => t('Cost:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_withdraw_fee.'</div>',
  );
  $entity->content['grp_exchange_fee'] = array(
    '#type' => 'item',
    '#title' => t('Cost:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_exchange_fee.'</div>',
  );
  $entity->content['grp_trade_fee'] = array(
    '#type' => 'item',
    '#title' => t('Cost:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_trade_fee.'</div>',
  );
  $entity->content['grp_monthly_fee'] = array(
    '#type' => 'item',
    '#title' => t('Cost:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_monthly_fee.'</div>',
  );
  $entity->content['grp_payment_length'] = array(
    '#type' => 'item',
    '#title' => t('Payment Length:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_payment_length.'</div>',
  );
  $entity->content['grp_max_transactions'] = array(
    '#type' => 'item',
    '#title' => t('Max Transactions:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_max_transactions.'</div>',
  );
  $entity->content['grp_max_emails'] = array(
    '#type' => 'item',
    '#title' => t('Max Transactions:'),
    '#markup' => '<div id="cc_user_id_wrapper">'.$entity->grp_max_emails.'</div>',
  );
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ccdev_groups_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_groups_add() {
     module_load_include('inc', 'ccGroup', 'includes/cc-php/form');
  $entity = entity_get_controller('ccdev_groups')->create();
  return drupal_get_form('ccdev_groups_form', $entity);
}


/**
 * Validation handler for entity_example_basic_add_form form.
 */
function ccdev_groups_form_validate($form, &$form_state) {
  field_attach_form_validate('ccdev_groups', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form submit handler: Submits basic_add_form information.
 */
function ccdev_groups_form_submit($form, &$form_state) {

 $entity = $form_state['values']['basic_entity'];
$entity->grp_name = $form_state['values']['grp_name'];
$entity->grp_description = $form_state['values']['grp_description'];
$entity->grp_type = $form_state['values']['grp_type'];
$entity->grp_withdraw_fee = $form_state['values']['grp_withdraw_fee'];
$entity->grp_exchange_fee = $form_state['values']['grp_exchange_fee'];
$entity->grp_trade_fee = $form_state['values']['grp_trade_fee'];
$entity->grp_monthly_fee = $form_state['values']['grp_monthly_fee'];
$entity->grp_max_emails = $form_state['values']['grp_max_emails'];
$entity->grp_max_transactions = $form_state['values']['grp_max_transactions'];
$entity->grp_payment_length = $form_state['values']['grp_payment_length'];
  field_attach_submit('ccdev_groups', $entity, $form, $form_state);
  $entity = ccdev_groups_save($entity);
  $form_state['redirect'] = 'ccMods/ccGroup/basic/' . $entity->basic_id;
}


/**
 * Form deletion handler.
 */
function ccdev_groups_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  entity_example_basic_delete($entity);
  drupal_set_message(t('The entity %site_name has been deleted',
    array('%site_name' => $entity->site_name, '%id' => $entity->basic_id))
  );
  $form_state['redirect'] = 'ccMods/ccGroup';
}


/**
 * We save the entity by calling the controller.
 */
function ccdev_groups_save(&$entity) {
  return entity_get_controller('ccdev_groups')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_groups_delete($entity) {
  entity_get_controller('ccdev_groups')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccGroupBasicControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();
  public function save($entity);
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccGroupBasicController
  extends DrupalDefaultEntityController
  implements ccGroupBasicControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {

    $entity = new stdClass();
    $entity->type = 'ccdev_groups';
 	$entity->basic_id = '';
    $entity->bundle_type = 'ccdev_groups_bundle';
    $entity->grp_name = 'group';
    $entity->grp_description = '';
	$entity->grp_type = '';
	$entity->grp_max_transactions = '0';
	$entity->grp_max_emails = '0';
	$entity->grp_withdraw_fee = '0.0';
	$entity->grp_exchange_fee = '0.0';
	$entity->grp_trade_fee = '0.0';
	$entity->grp_monthly_fee = '0.0';
	$entity->grp_size = '0';
	$entity->grp_payment_length = '0';
	$entity->created = date("Y-m-d H:i:s");
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.

    if (empty($entity->basic_id)) {
	global $user;
      $entity->user_id = $user->uid;
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ccdev_groups');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    drupal_write_record('ccdev_groups', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_groups', $entity);
    }
    else {
      field_attach_update('ccdev_groups', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'ccdev_groups');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_groups');
          field_attach_delete('ccdev_groups', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_groups')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccGroup', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup entity_example".
 */
