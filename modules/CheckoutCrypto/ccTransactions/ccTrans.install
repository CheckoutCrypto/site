<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function ccTrans_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_transactions'] = array(
    'description' => 'The base table for our transaction entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the transaction entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'uid' => array(
        'description' => 'The clients ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_code' => array(
        'description' => 'short code name for coin',
        'type' => 'varchar',
		'length' => 10,
        'not null' => TRUE,
        'default' => '0',
      ),
     'sender' => array(
        'description' => 'the senders wallet address',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
     'receiver' => array(
        'description' => 'the receivers wallet address',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
     'tranid' => array(
        'description' => 'the transaction id',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
        'default' => '',
      ),
     'amount' => array(
        'description' => 'the receivers wallet address',
       'type' => 'numeric',
	'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
     'fee' => array(
        'description' => 'the total txfee and our fee',
       'type' => 'numeric',
	'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
     'status' => array(
        'description' => 'A description of the item',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('basic_id'),
  );

  return $schema;
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function ccTrans_uninstall() {
  field_attach_delete_bundle('ccdev_transactions', 'transaction_bundle');
}
