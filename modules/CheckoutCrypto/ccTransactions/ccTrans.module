<?php

/**
 * CheckoutCrypto Transactions Module - View completed transactions
 *  Copyright 2014 CheckoutCrypto
 */



/**
 * Implements hook_entity_info().
 */
function ccTrans_entity_info() {
	module_load_include('inc', 'ccTrans', 'includes/settings');
	return trans_info();
}

/**
 * Declare what blocks are provided by this module.
 * Implements hook_block_info().
 */
function ccTrans_block_info(){
  module_load_include('inc','ccTrans','includes/block');
	return transactions_block_info();
}

/**
 * Define what our block is going to look like.
 * Implements hook_block_view().
 */
function ccTrans_block_view($block_key){
  module_load_include('inc','ccTrans','includes/block');
	return transactions_block_view($block_key);
}

/**
 * Fetch a basic object.
 */
function ccdev_transactions_load($basic_id = NULL, $reset = FALSE) {
	module_load_include('inc', 'ccTrans', 'includes/entity_load');
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = ccdev_transactions_load_multiple($basic_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Implements the uri callback.
 */
function ccdev_transactions_uri($basic) {
  return array(
    'path' => 'ccMod/ccTrans/basic/' . $basic->basic_id,
  );
}

/**
 * Implements hook_menu().
 */
function ccTrans_menu() {
	module_load_include('inc', 'ccTrans', 'includes/settings');
	return trans_menu();
}

/**
 * Basic information for the page.
 */
function ccTrans_info_page() {
	module_load_include('inc', 'ccTrans', 'includes/page');
	return trans_page();
}

/**
 * Implements hook_permission().
 */
function ccTrans_permission() {
	module_load_include('inc', 'ccTrans', 'includes/settings');
	return trans_permissions();
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_transactions_title($entity) {
  return t('Transactions');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_transactions_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_transactions';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['timestamp'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->timestamp),
  );
  $entity->content['sender'] = array(
    '#type' => 'item',
    '#title' => t('Sender Wallet'),
    '#markup' => $entity->sender,
  );
  $entity->content['receiver'] = array(
    '#type' => 'item',
    '#title' => t('Receiver Wallet'),
    '#markup' => $entity->receiver,
  );
  $entity->content['amount'] = array(
    '#type' => 'item',
    '#title' => t('Amount received'),
    '#markup' => $entity->amount,
  );
  $entity->content['fee'] = array(
    '#type' => 'item',
    '#title' => t('Fee received'),
    '#markup' => $entity->fee,
  );

  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ccdev_transactions_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * We save the entity by calling the controller.
 */
function ccdev_transactions_save(&$entity) {
  return entity_get_controller('ccdev_transactions')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_transactions_delete($entity) {
  entity_get_controller('ccdev_transactions')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccTransBasicControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();
  public function save($entity);
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccTransBasicController
  extends DrupalDefaultEntityController
  implements ccTransBasicControllerInterface {

  /**
   * Create and return a new ccdev_transactions entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ccdev_transactions';
    $entity->basic_id = 0;
    $entity->bundle_type = 'transactions_bundle';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    if (empty($entity->basic_id)) {
      $entity->timestamp = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ccdev_transactions');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    drupal_write_record('ccdev_transactions', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_transactions', $entity);
    }
    else {
      field_attach_update('ccdev_transactions', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'ccdev_transactions');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more ccdev_transactions entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_transactions');
          field_attach_delete('ccdev_transactions', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_transactions')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccTrans', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup ccTrans".
 */
