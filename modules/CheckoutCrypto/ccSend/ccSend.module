<?php

/**
 * CheckoutCrypto Send Module   - Send cryptocurrency to any email address.
 * Copyright 2014 CheckoutCrypto
 */

/**
 * Implements hook_entity_info().
 */
function ccSend_entity_info() {
  module_load_include('inc', 'ccSend', 'includes/cc-php/settings');
	return send_info();
}

/**
 * Implements the uri callback.
 */
function ccdev_send_uri($basic) {
  return array(
    'path' => 'ccSend/basic/' . $basic->basic_id,
  );
}

/**
 * Implementation of hook_preprocess().
 */
function ccSend_preprocess(&$variables, $hook) {
  module_load_include('inc', 'ccSend', 'includes/cc-php/settings');
	$settings = send_theme();
  drupal_add_js($settings, 'setting');
}

/**
 * Implements hook_menu().
 */
function ccSend_menu() {
   module_load_include('inc', 'ccSend', 'includes/cc-php/settings');
	return send_menu();
}

/**
 * Implements hook_permission().
 */
function ccSend_permission() {
	module_load_include('inc', 'ccSend', 'includes/cc-php/settings');
	return send_permissions();
}

/**
 * Returns a render array with all ccdev_send entities.
 */
function ccdev_send_list_entities() {
	module_load_include('inc', 'ccSend', 'includes/cc-php/entity');
	return send_list();
}

/**
 * Basic information for the page.
 */
function ccSend_info_page() {
   module_load_include('inc', 'ccSend', 'includes/cc-php/page');
	return send_info_page();
}

/**
 * Basic information for the page.
 */
function ccSend_complete_page() {
	module_load_include('inc', 'ccSend', 'includes/cc-php/page');
	return send_complete_page();
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_send_title($entity) {
  return t('Send');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_send_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_send';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
   $entity->content['recip_email'] = array(
    '#type' => 'item',
    '#title' => t('Email:'),
    '#markup' => $entity->recip_email,
  );
  $entity->content['recip_name'] = array(
    '#type' => 'item',
    '#title' => t('Recipient:'),
    '#markup' => $entity->recip_name,
  ); 
  $entity->content['recip_msg'] = array(
    '#type' => 'item',
    '#title' => t('Message:'),
    '#markup' => $entity->recip_msg,
  ); 
  $entity->content['coin_code'] = array(
    '#type' => 'item',
    '#title' => t('Coin:'),
    '#markup' => $entity->coin_code,
  ); 
  $entity->content['coin_amt'] = array(
    '#type' => 'item',
    '#title' => t('Amount::'),
    '#markup' => $entity->coin_amt,
  ); 
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ccdev_send_view', 'entity_view'),
    $entity->content, $entity_type);
  return $entity->content;
}

/**
 * Ajax menu callback.
 */
function ccSend_funds_callback($ajax, $coincode = NULL) {
  if ($ajax) {
   module_load_include('inc', 'ccSend', 'includes/cc-php/form');
    ctools_include('ajax');
    ctools_include('modal');
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Send Funds Form'),
      'coincode' => $coincode,
    );

    $output = ctools_modal_form_wrapper('ccsend_funds', $form_state);
 
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('ccsend_funds');
  }
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_send_add() {
   module_load_include('inc', 'ccSend', 'includes/cc-php/form');
  $entity = entity_get_controller('ccdev_send')->create();
  return drupal_get_form('ccdev_send_form', $entity);
}

/**
 * Form deletion handler.
 */
function ccdev_send_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  ccdev_send_delete($entity);
  drupal_set_message(t('The entity %coin_name (ID %id) has been deleted',
    array('%coin_name' => $entity->coin_name, '%id' => $entity->basic_id))
  );
  $form_state['redirect'] = 'ccSend';
}

/**
 * We save the entity by calling the controller.
 */
function ccdev_send_save(&$entity) {
  return entity_get_controller('ccdev_send')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_send_delete($entity) {
  entity_get_controller('ccdev_send')->delete($entity);
}


/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccSendBasicControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();
  public function save($entity);
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccSendBasicController
  extends DrupalDefaultEntityController
  implements ccSendBasicControllerInterface {

  /**
   * Create and return a new ccdev_send entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ccdev_send';
    $entity->basic_id = 0;
    $entity->bundle_type = 'Send_bundle';
    $entity->recip_name = '';
	$entity->recip_email = '';
	$entity->recip_msg = '';
	$entity->coin_code = '';
	$entity->coin_amt = '0.0';
	$entity->recip_address = '';
	$entity->sent = '';
	$entity->retrived = '';
    return $entity;
  }


  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->basic_id)) {
	global $user;
      $entity->user_id = $user->uid;
      $entity->sent = date("Y-m-d H:i:s");
		//$entity->recip_address =  writeOTP($entity);
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ccdev_send');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    drupal_write_record('ccdev_send', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_send', $entity);
    }
    else {
      field_attach_update('ccdev_send', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'ccdev_send');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for deleteMultiple().
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more ccdev_send entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_send');
          field_attach_delete('ccdev_send', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_send')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccSend', $e);
        throw $e;
      }
    }
  }
}


/**
 * Form submit handler: Submits basic_add_form information.
 */
function ccsend_funds_submit($form, &$form_state) {
  	module_load_include('inc', 'ccSend', 'includes/cc-php/form_sub');
	$commands = send_funds_submit($form, $form_state);
	print ajax_render($commands);
	drupal_exit();
}

/**
 * Form submit handler: Submits basic_add_form information.
 */
function ccsend_funds_validate($form, &$form_state) {
  	module_load_include('inc', 'ccSend', 'includes/cc-php/form_sub');
	send_funds_validate($form, $form_state);
}

/**
 * @} End of "defgroup ccSend".
 >*/
