<?php
/**
 * CheckoutCrypto Wallets Module - View created/filled wallets
 * Copyright 2014 CheckoutCrypto
 */

/**
 * Declare what blocks are provided by this module.
 * Implements hook_block_info().
 */
function ccWallets_block_info(){
  module_load_include('inc','ccWallets','includes/block');
	return wallet_block_info();
}

/**
 * Define what our block is going to look like.
 * Implements hook_block_view().
 */
function ccWallets_block_view($block_key){
  module_load_include('inc','ccWallets','includes/block');
	return wallet_block_view($block_key);
}

/**
 * Implements hook_entity_info().
 */
function ccWallets_entity_info() {
 	module_load_include('inc', 'ccWallets', 'includes/settings');
	return wallets_info();
}

/**
 * Fetch a basic object.
 */
function ccdev_wallets_load($basic_id = NULL, $reset = FALSE) {
	module_load_include('inc', 'ccWallets', 'includes/entity_load');
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = ccdev_wallets_load_multiple($basic_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Implements the uri callback.
 */
function ccdev_wallets_uri($basic) {
  return array(
    'path' => 'ccMod/ccWallets/basic/' . $basic->basic_id,
  );
}

/**
 * Implements hook_menu().
 */
function ccWallets_menu() {
  	module_load_include('inc', 'ccWallets', 'includes/settings');
	return wallets_menu();
}

/**
 * Basic information for the page.
 */
function ccWallets_info_page() {
	module_load_include('inc', 'ccWallets', 'includes/page');
	return wallets_page();
}

/**
 * Implements hook_permission().
 */
function ccWallets_permission() {
	module_load_include('inc', 'ccWallets', 'includes/settings');
	return wallets_permissions();
}


/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_wallets_title($entity) {
  return t('Wallets Generated by API');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_wallets_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_wallets';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ccdev_wallets_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_wallets_add() {
  $entity = entity_get_controller('ccdev_wallets')->create();
  return drupal_get_form('ccdev_wallets_form', $entity);
}

/**
 * We save the entity by calling the controller.
 */
function ccdev_wallets_save(&$entity) {
  return entity_get_controller('ccdev_wallets')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_wallets_delete($entity) {
  entity_get_controller('ccdev_wallets')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccWalletsBasicControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();
  public function save($entity);
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccWalletsBasicController
  extends DrupalDefaultEntityController
  implements ccWalletsBasicControllerInterface {

  /**
   * Create and return a new ccdev_wallets entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ccdev_wallets';
    $entity->basic_id = 0;
    $entity->bundle_type = 'wallet_bundle';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->basic_id)) {
     // $entity->timestamp = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'ccdev_wallets');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    drupal_write_record('ccdev_wallets', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_wallets', $entity);
    }
    else {
      field_attach_update('ccdev_wallets', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'ccdev_wallets');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more ccdev_wallets entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_wallets');
          field_attach_delete('ccdev_wallets', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_wallets')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccWallets', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup ccWallets".
 */
