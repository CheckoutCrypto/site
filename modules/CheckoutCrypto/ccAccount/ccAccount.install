<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function ccAccount_schema() {
  $schema = array();
  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_accounts'] = array(
    'description' => 'The base table for our account entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the account entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'user_id' => array(
        'description' => 'users id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'walletname' => array(
        'description' => 'The clients wallet account name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'api_key' => array(
        'description' => 'The clients apikey',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'isMaintenance' => array(
        'description' => 'The admin role of apikey',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'isFrozen' => array(
        'description' => 'The status of apikey',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'total_balance' => array(
        'description' => 'The clients total balance for default coins',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'total_transactions' => array(
        'description' => 'The number of transactions',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0.0',
      ),
     'default_coin' => array(
        'description' => 'The default coin code',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
     'verified' => array(
        'description' => 'if verified, the verification ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
     'delay_seconds' => array(
        'description' => 'The api delay in seconds',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'user_id' => array('user_id'),
    ),
    'primary key' => array('basic_id'),
  );

$schema['ccdev_billing'] = array(
    'description' => 'The base table for our billing entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the billing entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'user_id' => array(
        'description' => 'users id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'grp_id' => array(
        'description' => 'group id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '1',
      ),
      'grp_name' => array(
        'description' => 'The group package price name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'paid_amt' => array(
        'description' => 'The amount in pref_coin paid',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'paid_coin' => array(
        'description' => 'The pref_coin paid',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'paid_date' => array(
        'description' => 'last date of payment',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'user_id' => array('basic_id'),
    ),
    'primary key' => array('basic_id'),
  );


$schema['ccdev_billing_summary'] = array(
    'description' => 'The base table for our billing summary entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the billing summary entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'user_id' => array(
        'description' => 'users id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'grp_id' => array(
        'description' => 'group id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'paid_amt' => array(
        'description' => 'The last amount in $ paid',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'billing_trans' => array(
        'description' => 'Total Transactions in Billing Cycle',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'total_trans' => array(
        'description' => 'Total Transactions since Reg',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'total_email_trans' => array(
        'description' => 'Total Email Transactions since Reg',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'last_paid_date' => array(
        'description' => 'last date of payment',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
      'total_paid_amt' => array(
        'description' => 'The total amount in $ paid by client',
       'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
      'billing_cycle' => array(
        'description' => 'date upon which this client is billed',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'user_id' => array('user_id'),
    ),
    'primary key' => array('basic_id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 *
 * Adds api keys used for site maintenance
 * and user assistance
 */
function ccAccount_install() {
   if(!(drupal_get_schema('ccdev_accounts'))) {
      drupal_install_schema('ccdev_accounts');
   }
   if(!(drupal_get_schema('ccdev_billing'))) {
      drupal_install_schema('ccdev_billing');
   }
   if(!(drupal_get_schema('ccdev_billing_summary'))) {
      drupal_install_schema('ccdev_billing_summary');
   }
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function ccAccount_uninstall() {
  field_attach_delete_bundle('ccdev_accounts', 'ccdev_account_bundle');
}
