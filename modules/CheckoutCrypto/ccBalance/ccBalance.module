<?php

/**
 * CHECKOUTCRYPTO Balance Module  - Display Current/Pending Balances, Withdraw, Autopay
 * Copyright 2014 CheckoutCrypto
 */

/**
 * Implements hook_entity_info().
 */
function ccBalance_entity_info() {
    module_load_include('inc', 'ccBalance', 'includes/cc-php/settings');
  return balance_info();
}

/**
 * Implements the uri callback.
 */
function ccdev_balance_uri($basic) {
  return array(
    'path' => 'Balance/basic/' . $basic->basic_id,
  );
}

/**
 * Implementation of hook_preprocess().
 */
function ccBalance_preprocess(&$variables, $hook) {
  module_load_include('inc', 'ccBalance', 'includes/cc-php/settings');
	balance_theme();
}

/**
 * Implements hook_menu().
 */
function ccBalance_menu() {
  module_load_include('inc', 'ccBalance', 'includes/cc-php/settings');
  return balance_menu();
}

/**
 * Basic information for the page.
 */
function ccBalance_info_page() {
 module_load_include('inc', 'ccBalance', 'includes/cc-php/page');
  return balance_info_page();
}

/**
 * Declare what blocks are provided by this module.
 * Implements hook_block_info().
 */
function ccBalance_block_info(){
  module_load_include('inc','ccBalance','includes/cc-php/block');
	return balance_block_info();
}

/**
 * Define what our block is going to look like.
 * Implements hook_block_view().
 */
function ccBalance_block_view($block_key){
  module_load_include('inc','ccBalance','includes/cc-php/block');
	return balance_block_view($block_key);
}

/*
* Define where our block is going to be placed
* Implements hook_block_info_alter()
*/
function ccBalance_block_info_alter(&$blocks, $theme, $code_blocks) {
  module_load_include('inc','ccBalance','includes/cc-php/block');
	return balance_block_setup($blocks, $theme, $code_blocks);
}
/**
 * Implements hook_permission().
 */
function ccBalance_permission() {
 module_load_include('inc', 'ccBalance', 'includes/cc-php/settings');
  return balance_permissions();
}

/**
 * Callback for a page title when this entity is displayed.
 */
function ccdev_balance_title($entity) {
  return t('Balance');
}

/**
 * Menu callback to display an entity.
 */
function ccdev_balance_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'ccdev_balance';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->basic_id => $entity),
    $view_mode);
  entity_prepare_view($entity_type, array($entity->basic_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

   $entity->content['coin_name'] = array(
    '#type' => 'item',
    '#title' => t('Coin Name'),
    '#markup' => $entity->coin_name,
  );
  $entity->content['coin_code'] = array(
    '#type' => 'item',
    '#title' => t('coin code e.g. BTC'),
    '#markup' => $entity->coin_code,
  ); 
  $entity->content['coin_balance'] = array(
    '#type' => 'item',
    '#title' => t('coin balance'),
    '#markup' => $entity->coin_balance,
  ); 

  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  drupal_alter(array('ccdev_balance_view', 'entity_view'),
    $entity->content, $entity_type);

  return $entity->content;
}

/**
 * Form submit handler: Submits basic_add_form information.
 */
function ccdev_balance_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->coin_name = $form_state['values']['coin_name'];
  $entity->coin_code = $form_state['values']['coin_code'];
  $entity->coin_balance = $form_state['values']['coin_balance'];
  field_attach_submit('ccdev_balance', $entity, $form, $form_state);
  $entity = ccdev_balance_save($entity);
  $form_state['redirect'] = 'Balance/basic/' . $entity->basic_id; 
}

/**
 * Form deletion handler.
 */
function ccdev_balance_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  ccdev_balance_delete($entity);
  drupal_set_message(t('The entity %coin_name (ID %id) has been deleted',
    array('%coin_name' => $entity->coin_name, '%id' => $entity->basic_id))
  );
  $form_state['redirect'] = 'Balance';
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function ccdev_balance_add() {
  $entity = entity_get_controller('ccdev_balance')->create();
  return drupal_get_form('ccdev_balance_form', $entity);
}

/**
 * We save the entity by calling the controller.
 */
function ccdev_balance_save(&$entity) {
  return entity_get_controller('ccdev_balance')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function ccdev_balance_delete($entity) {
  entity_get_controller('ccdev_balance')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 */
interface ccBalanceBasicControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   */
  public function save($entity);

  /**
   * Delete an entity.
   */
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 */
class ccBalanceBasicController
  extends DrupalDefaultEntityController
  implements ccBalanceBasicControllerInterface {

  /**
   * Create and return a new ccdev_balance entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'ccdev_balance';
    $entity->basic_id = 0;
    $entity->bundle_type = 'balance_bundle';
    $entity->coin_name = 'coin';
	$entity->coin_code = 'eg btc';
	$entity->coin_balance = '0.0';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    if (empty($entity->basic_id)) {
	global $user;
      $entity->user_id = $user->uid;
      $entity->updated = date("Y-m-d H:i:s");
    }
    module_invoke_all('entity_presave', $entity, 'ccdev_balance');
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    drupal_write_record('ccdev_balance', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('ccdev_balance', $entity);
    }
    else {
      field_attach_update('ccdev_balance', $entity);
      $invocation = 'entity_update';
    }
    module_invoke_all($invocation, $entity, 'ccdev_balance');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more ccdev_balance entities.
   */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ccdev_balance');
          field_attach_delete('ccdev_balance', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('ccdev_balance')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ccBalance', $e);
        throw $e;
      }
    }
  }
}

/**
 * Ajax menu callback.
 */
function ccBalance_withdraw_callback($ajax, $coincode = NULL) {
  if ($ajax) {
    module_load_include('inc', 'ccBalance', 'includes/cc-php/forms');
    module_load_include('inc', 'ccOTP', 'includes/lib');
    ctools_include('ajax');
    ctools_include('modal');
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Withdraw Form'),
      'coincode' => $coincode,
    );

	$sent = ccOTP_otp_checkExists();
	if(isset($sent)) {
		$output = ctools_modal_form_wrapper('OTP_form', $form_state);
	}else{
		$output = ctools_modal_form_wrapper('withdraw_form', $form_state);
	 }
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
 
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('withdraw_form');
  }
}

/**
 * Ajax menu callback.
 */
function ccBalance_autopay_callback($ajax, $coincode = NULL) {
  if ($ajax) {
    module_load_include('inc', 'ccBalance', 'includes/cc-php/forms');
    module_load_include('inc', 'ccOTP', 'includes/lib');
    ctools_include('ajax');
    ctools_include('modal');
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('AutoPayment Form'),
      'coincode' => $coincode,
    );

	$sent = ccOTP_otp_checkExists();
	if(isset($sent)) {
		$output = ctools_modal_form_wrapper('OTP_form', $form_state);
	}else{
		$output = ctools_modal_form_wrapper('autopay_form', $form_state);
	 }
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
 
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('autopay_form');
  }
}

/*
* Deposit Popup
*/
function ccBalance_deposit_callback($ajax, $coincode = NULL) {

 if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    	module_load_include('inc', 'ccBalance', 'includes/cc-php/forms');
	drupal_add_js(drupal_get_path('module','ccBalance').'/js/cgPopup.js');
	global $base_url;
	$my_settings = array(
	  'baseUrl' => $base_url,
	 );
	$time_limit = 900;
	$cg_settings = array(
	    'time_limit' => $time_limit
	);
	drupal_add_js(array('ccBalance' => $my_settings), 'setting');
	drupal_add_js(array('ccBalance' => $cg_settings), 'setting');
	$adress = '';	
	if(isset($form_state['input']['address'])){	
		$address = $form_state['input']['address'];
	}
	$request = array('coin' => $coin, 'address' =>  $address);	
		
	$form_state = array(
		'ajax' => TRUE,
		'title' => t('COINGATEWAY DEPOSIT'),
		'request' => $request,
	);
	$output = ctools_modal_form_wrapper('Deposit_form', $form_state); 
	print ajax_render($output); 
	drupal_exit();
  }else {
    return drupal_get_form('Deposit_form');
  }

}

/*
*  Deposit callback
*/
function deposit_process($form, $form_state){
  module_load_include('inc','ccBalance','includes/forms');
 Deposit_form_callback($form, $form_state);
}

/*
* Deposit Popup
*/
function ccBalance_autotrade_callback($ajax, $coincode = NULL) {

 if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    	module_load_include('inc', 'ccBalance', 'includes/cc-php/forms');
	drupal_add_js(drupal_get_path('module','ccBalance').'/js/cgPopup.js');
	global $base_url;
	$my_settings = array(
	  'baseUrl' => $base_url,
	 );
	$time_limit = 900;
	$cg_settings = array(
	    'time_limit' => $time_limit
	);
	drupal_add_js(array('ccBalance' => $my_settings), 'setting');
	drupal_add_js(array('ccBalance' => $cg_settings), 'setting');
	$adress = '';	
	if(isset($form_state['input']['address'])){	
		$address = $form_state['input']['address'];
	}
	$request = array('coin' => $coin, 'address' =>  $address);	
		
	$form_state = array(
		'ajax' => TRUE,
		'title' => t('COINGATEWAY AUTOTRADE'),
		'request' => $request,
	);
	$output = ctools_modal_form_wrapper('autotrade_form', $form_state); 
	print ajax_render($output); 
	drupal_exit();
  }else {
    return drupal_get_form('autotrade_form');
  }

}

/**
 * @} End of "defgroup ccBalance".
 >*/
