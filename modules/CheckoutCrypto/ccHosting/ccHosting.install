<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function ccHosting_schema() {
  $schema = array();
  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_hosting'] = array(
    'description' => 'The base table for our account entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the account entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'user_id' => array(
        'description' => 'account/user id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'site_name' => array(
        'description' => 'The clients preferred site name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_description' => array(
        'description' => 'The clients site description',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_domain' => array(
         'description' => 'The clients domain',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
     'site_cms' => array(
        'description' => 'The clients preferred CMS',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_admin_user' => array(
        'description' => 'The clients  admin user',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_admin_pass' => array(
        'description' => 'The clients admin pass',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_mysql_admin' => array(
        'description' => 'The clients  mysql admin',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_mysql_pass' => array(
        'description' => 'The clients mysql pass',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_mysql_table' => array(
        'description' => 'The clients  mysql user',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'group_price' => array(
        'description' => 'The group pricing package id',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'isEnabled' => array(
        'description' => 'The status of apikey',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('basic_id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 *
 * Adds api keys used for site maintenance
 * and user assistance
 */
function ccHosting_install() {
   if(!(drupal_get_schema('ccdev_hosting'))) {
      drupal_install_schema('ccdev_hosting');
   }
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function ccHosting_uninstall() {
  field_attach_delete_bundle('ccdev_hosting', 'ccdev_hosting_bundle');
}
