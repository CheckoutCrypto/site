<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 *
 * @ingroup entity_example
 */
function cgTrading_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ccdev_trades'] = array(
    'description' => 'The base table for our wallet entity.',
    'fields' => array(
      'basic_id' => array(
        'description' => 'Primary key of the wallet entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'uid' => array(
        'description' => 'A clients ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'gid' => array(
        'description' => 'A clients group ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'coin_to' => array(
        'description' => 'A single wallets coin type',
        'type' => 'varchar',
		'length' => 30,
        'not null' => TRUE,
        'default' => '0',
      ),
	'amount_to' => array(
        'description' => 'A single transaction amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'coin_from' => array(
        'description' => 'A single wallets coin type',
        'type' => 'varchar',
		'length' => 30,
        'not null' => TRUE,
        'default' => '0',
      ),
	'amount_from' => array(
        'description' => 'A single transaction amount',
        'type' => 'numeric',
		'size' => 'normal',
        'precision' => 30,
        'scale' => 8,
        'not null' => TRUE,
        'default' => '0.0',
      ),
	'ignore_amt' => array(
        'description' => 'Ignore planned amount_to',
        'type' => 'varchar',
		'length' => 30,
        'not null' => TRUE,
        'default' => '',
      ),
	'address_gen' => array(
        'description' => 'A senders wallets address',
        'type' => 'varchar',
		'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
	'address_out' => array(
        'description' => 'A senders wallets address',
        'type' => 'varchar',
		'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
	'txid' => array(
        'description' => 'A senders wallets address',
        'type' => 'varchar',
		'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
	'id_gen' => array(
        'description' => 'The status of a workers gettradeaddress action',      
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'id_last' => array(
        'description' => 'The status of workers getstatus action',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
	'status' => array(
        'description' => 'The status of the order result 0-1 ',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
		'default' =>  date("Y-m-d H:i:s"),
        'not null' => TRUE,
      ), 
    ),
    'primary key' => array('basic_id'),
  );
  return $schema;
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup entity_example
 */
function cgTrading_uninstall() {
  field_attach_delete_bundle('ccdev_trades', 'trade_bundle');
}
